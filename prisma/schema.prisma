generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  projects      Project[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String              @id @default(cuid())
  title       String
  description String?
  prompt      String
  status      ProjectStatus       @default(GENERATING)
  userId      String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  components  ProjectComponent[]
  config      ProjectConfig?
  deployments ProjectDeployment[]
  files       ProjectFile[]
  generations ProjectGeneration[]
  history     ProjectHistory[]

  @@index([userId])
  @@index([status])
}

model ProjectFile {
  id        String   @id @default(cuid())
  projectId String
  path      String
  content   String
  type      FileType
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, path])
  @@index([projectId])
}

model ProjectGeneration {
  id         String           @id @default(cuid())
  projectId  String
  prompt     String
  aiProvider String
  response   String?
  status     GenerationStatus @default(PENDING)
  error      String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  project    Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
}

model ProjectHistory {
  id        String   @id @default(cuid())
  projectId String
  action    String
  details   String?
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([createdAt])
}

model ProjectComponent {
  id          String   @id @default(cuid())
  projectId   String
  componentId String
  name        String
  category    String
  code        Json
  preview     String
  tags        Json     @default("[]")
  addedAt     DateTime @default(now())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([category])
}

model ProjectConfig {
  id                   String   @id @default(cuid())
  projectId            String   @unique
  buildTool            String   @default("vite")
  framework            String   @default("vanilla")
  bundler              String   @default("esbuild")
  outputDir            String   @default("dist")
  publicPath           String   @default("/")
  minify               Boolean  @default(true)
  sourceMap            Boolean  @default(false)
  hotReload            Boolean  @default(true)
  platform             String   @default("vercel")
  domain               String   @default("")
  customDomain         String   @default("")
  environment          String   @default("production")
  buildCommand         String   @default("npm run build")
  outputDirectory      String   @default("dist")
  nodeVersion          String   @default("18")
  environmentVariables Json     @default("{}")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  project              Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectDeployment {
  id           String           @id @default(cuid())
  projectId    String
  platform     String
  branch       String           @default("main")
  customDomain String           @default("")
  status       DeploymentStatus @default(PENDING)
  url          String           @default("")
  commit       String           @default("")
  logs         Json             @default("[]")
  createdAt    DateTime         @default(now())
  completedAt  DateTime?
  project      Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
  @@index([createdAt])
}

model AIPrompt {
  id           String     @id @default(cuid())
  name         String     @unique
  provider     AIProvider
  type         PromptType
  title        String
  description  String?
  systemPrompt String
  isActive     Boolean    @default(true)
  version      Int        @default(1)
  createdBy    String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([provider])
  @@index([type])
  @@index([isActive])
}

enum ProjectStatus {
  GENERATING
  COMPLETED
  FAILED
  ARCHIVED
}

enum FileType {
  HTML
  CSS
  JAVASCRIPT
  TYPESCRIPT
  REACT
  VUE
  ANGULAR
  JSON
  MARKDOWN
  OTHER
}

enum GenerationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum DeploymentStatus {
  PENDING
  BUILDING
  DEPLOYING
  SUCCESS
  FAILED
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum AIProvider {
  OPENAI
  ANTHROPIC
  GEMINI
  CEREBRAS
}

enum PromptType {
  WEBSITE_GENERATION
  WEBSITE_MODIFICATION
  CHAT_ASSISTANT
}
